plugins {
    id 'bobbson.java-conventions'
    id 'java-library'
    id 'maven-publish'
}

dependencies {
    implementation 'org.vibur:vibur-object-pool:25.0'
    implementation 'com.bolyartech.scram_sasl:scram_sasl:2.0.2'
    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    implementation 'org.slf4j:slf4j-api:2.0.3'
    implementation "com.github.bobthekingofegypt.bobbson:bobbson:${bobbsonVersion}"
    implementation "com.github.bobthekingofegypt.bobbson:bobbson-mongodb:${bobbsonVersion}"
    annotationProcessor "com.github.bobthekingofegypt.bobbson:processor:${bobbsonVersion}"
    implementation 'org.checkerframework:checker-qual:3.28.0'
    implementation 'com.github.luben:zstd-jni:1.5.2-5'
    implementation 'com.github.luben:zstd-jni:1.5.2-5:linux_amd64'
    implementation 'org.mongodb:bson:4.5.0'

    testImplementation 'com.google.guava:guava:31.1-jre'
    testImplementation 'ch.qos.logback:logback-classic:1.4.4'
}

checkerFramework {
    skipCheckerFramework = true
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'org.bobstuff'
            artifactId = 'bongo'
            version = '1.0-SNAPSHOT'

            from components.java

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

testing {
    suites {
        integrationTest(JvmTestSuite) {
            tasks["pmdIntegrationTest"].enabled = false
            dependencies {
                implementation project
                implementation 'com.google.guava:guava:31.1-jre'
                implementation 'ch.qos.logback:logback-classic:1.4.4'
                implementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.8.2'
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    println(name)
    // Don't run the checker on generated code.
    if (name.equals("compileMainGeneratedDataTemplateJava") || name.equals("compileIntegrationTestJava") || name.equals("compileTestJava")
            || name.equals("compileMainGeneratedRestJava")) {
        checkerFramework {
            skipCheckerFramework = true
        }
    }
}